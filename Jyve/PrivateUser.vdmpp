/* Represents the private profile of a user which is able to log in. */
class PrivateUser is subclass of User
types
	public static Email = Common`String1;
	public static Password = Common`String1
		inv p == len p >= minLength;
	public static Places = set of Place;
	public static Shows = set of Calendar`Show;
	private static PrivateUsers = set of PrivateUser;
values
	private minLength = 8;
instance variables
	public email : Email;
	public password : Password;
	public myArtists : Artist`Artists;
	public myBands : Band`Bands;
	public myPlaces : Places;
	public myShows : Shows;
	private static privateUsers : PrivateUsers := {};
operations
	public PrivateUser : Common`String1 * Email * Password ==> PrivateUser
	PrivateUser(n,e,pass) == (
		email := e;
		password := pass;
		myArtists := {};
		myBands := {};
		myPlaces := {};
		myShows := {};
		privateUsers := privateUsers union {self};
		User(n);
	)
	pre len pass >= minLength and forall u in set privateUsers & u.email <> e	-- Verification of the invariant on 'pass'.
	post email = e and password = pass and myArtists = {} and myBands = {} and myPlaces = {}  -- Verification of the invariant on 'pass' by verifying that the assignment is correct (already passed precondition).
		and myShows = {} and self in set privateUsers;

	public SetPassword : Password ==> ()
	SetPassword(p) == password := p
	pre len p >= minLength -- Verification of the invariant.
	post password = p; -- Verification of the invariant by verifying that the assignment is correct (already passed precondition).

	public CreateArtist : Common`String1 * Common`Address ==> ()
	CreateArtist(n,addr) == myArtists := myArtists union {new Artist(n,addr)}
	post exists1 a in set myArtists & a.name = n and a.address = addr;

	public CreateBand : Common`String1 * Common`Address * Band`Members ==> ()
	CreateBand(n,addr,members) == myBands := myBands union {new Band(n,addr,members)}
	post exists1 b in set myBands & b.name = n and b.address = addr and b.members = members;

	public CreatePlace : Common`String1 * Common`String * Common`Address ==> ()
	CreatePlace(n,desc,addr) == myPlaces := myPlaces union {new Place(n,desc,addr)}
	post exists1 p in set myPlaces & p.name = n and p.description = desc and p.address = addr;

	public RemovePlace : Place ==> ()
	RemovePlace(p) == (
		myPlaces := myPlaces \ {p};
		Place`RemovePlace(p);
	)
	pre p in set myPlaces
	post p not in set myPlaces and myPlaces~ = myPlaces union {p};

	public CreateShow : Common`String1 * Calendar`Performers * Common`Date * Common`Date * Place * Common`String ==> ()
	CreateShow(n,ps,sd,ed,pl,desc) == (
		dcl s : Calendar`Show := Calendar`CreateShow(n,ps,sd,ed,pl,desc);
		myShows := myShows union {s};
		Calendar`AddShow(s);
	)
	post exists1 s in set myShows & s.name = n and s.performers = ps and s.startDate = sd and s.endDate = ed and s.place = pl and s.description = desc;

	public RemoveShow : Calendar`Show ==> ()
	RemoveShow(s) == (
		myShows := myShows \ {s};
		Calendar`RemoveShow(s);
	)
	pre s in set myShows
	post s not in set myShows and myShows~ = myShows union {s};

	public static GetPrivateUser : Email * Password ==> [PrivateUser]
	GetPrivateUser(e,p) == (
		for all u in set privateUsers do
			if (u.email = e and u.password = p) then
				return u;
		return nil;
	)
	pre len p >= minLength	-- Verification of the invariant.
	post RESULT = nil or (RESULT in set privateUsers and RESULT.email = e and RESULT.password = p); -- Verification of the invariant by comparing the result with the input (already passed precondition).
functions
traces
end PrivateUser