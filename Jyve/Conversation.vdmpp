/* Represents a conversation between elements of the class 'User'. */
class Conversation
types
	public static Users = set of User;
	public static Message ::
		date : Common`Date
		text : Common`String1
		sender : User;
	public static Messages = inmap nat1 to Message;
values
	private static minMembers = 1;
instance variables
	public members : Users;
	public topic : Common`String1;
	public messages : Messages := { |-> };
operations
	public Conversation : Common`String1 * Users ==> Conversation
	Conversation(t, users) == (
		topic := t;
		members := users;
		for all user in set members do
			user.AddConversation(self);
	)
	pre card users >= minMembers
	post members = users
		and topic = t
		and forall user in set members & self in set user.conversations;

	public AddMember : User ==> ()
	AddMember(u) == (
		if (u not in set members) then (
			members := members union {u};
			u.AddConversation(self);
		);
	)
	post u in set members and (members~ = members or members~ = members \ {u}) and self in set u.conversations;

	-- If 'members' becomes empty, the conversation is expected to be lost and automatically destroyed by JVM.
	public RemoveMember : User ==> ()
	RemoveMember(u) == (
		if (u in set members) then (
				members := members \ {u};
			u.RemoveConversation(self);
		);
	)
	post u not in set members and members~ = members union {u} and self not in set u.conversations;

	public SetTopic : Common`String1 ==> ()
	SetTopic(t) == topic := t
	post topic = t;

	public AddMessage : Common`Date * Common`String1 * User ==> ()
	AddMessage(d,t,s) == (
		dcl msg : Message := mk_Message(d,t,s);
		dcl myMap : Messages := { card dom messages + 1 |-> msg };
		messages := messages munion myMap;
	)
	pre s in set members
	post card dom messages = card dom messages~ + 1;
functions
traces
end Conversation