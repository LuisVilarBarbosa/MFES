class Common
types
	public static String = seq of char;
	public static String1 = seq1 of char;
	public static Address ::
		street : String
		number : String
		city : String1
		zipcode : String;
	public static Date ::
		year : nat1
		month : nat1
		day : nat1
		hour : nat
		minute : nat
		inv d == d.month  <= 12 and d.day <= DaysOfMonth(d.year, d.month) and d.hour < 24 and d.minute < 60;
values
instance variables
operations
	public static ContainsStr2 : String1 * String1 ==> bool
	ContainsStr2(str1,str2) == (
		for i = 1 to len str1 - len str2 do (
			dcl res : bool := true;
			for j = 1 to len str2 do (
				if (str1(i+j-1) <> str2(j)) then
					res := false;
			);
			if(res) then
				return res;
		);
		return false;
	);
functions
	public static DaysOfMonth : nat1 * nat1 +> nat1
	DaysOfMonth(y,m) == (
		if (m = 2) then (
			if (y mod 400 = 0) or ((y mod 4 = 0) and (y mod 100 <> 0))
				then 29
			else 28
		)
		else 31 - (m - 1) mod 7 mod 2
	)
	pre m <= 12
	post if m = 2 then RESULT in set {28,29} else RESULT in set {30,31};

	public static CreateAddress : String * String * String1 * String +> Address
	CreateAddress(stt,num,c,zip) == mk_Address(stt,num,c,zip)
	post RESULT.street = stt and RESULT.number = num and RESULT.city = c and RESULT.zipcode = zip;

	public static CreateDate : nat1 * nat1 * nat1 * nat * nat +> Date
	CreateDate(y,m,d,h,min) == mk_Date(y,m,d,h,min)
	pre m >= 1 and m <= 12 and d >=1 and d <= DaysOfMonth(y,m) and h >= 0 and h < 24 and min >= 0 and min < 60 -- invariant verification
	post RESULT.year = y and RESULT.month = m and RESULT.day = d and RESULT.hour = h and RESULT.minute = min; -- invariant verification by verifying that the assignment is correct (already passed precondition)

	public static isBeforeOrEqual : Date * Date +> bool
	isBeforeOrEqual(d1,d2) == d2.year > d1.year or (d2.year = d1.year and (d2.month > d1.month or d2.month = d1.month and d2.day >= d1.day));
traces
end Common