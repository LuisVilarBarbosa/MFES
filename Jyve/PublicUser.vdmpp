/*
	Represents any public profile and, among other
	features, illustrates the usage of 'atomic'.
*/
class PublicUser is subclass of User
types
	public static Genre = Common`String1;
	public static Genres = set of Genre;
	public static Instrument = Common`String1;
	public static Instruments = set of Instrument;
	public static Song ::
		name : Common`String1
		link : Common`String1;
	public static Songs = set of Song;
	public static PublicUsers = set of PublicUser;
values
instance variables
	public songs : Songs;
	public address : Common`Address;
	public genres : Genres;
	public instruments : Instruments;
	public description : Common`String;
	private static allSongs : Songs := {};
	inv forall s in set songs & s in set allSongs;
operations
	public PublicUser : Common`String1 * Common`Address ==> PublicUser
	PublicUser(stgName, addr) == (
		songs := {};
		address := addr;
		genres := {};
		instruments := {};
		description := "";
		User(stgName);
	)
	post songs = {} and address = addr and genres = {} and instruments = {} and description = "";

	public AddSong : Common`String1 * Common`String1 ==> ()
	AddSong(n,l) == (
		dcl s : Song := mk_Song(n,l);
		atomic(
			songs := songs union {s};
			allSongs := allSongs union {s};
		);
	)
	pre forall s1 in set songs & s1.link <> l	-- Double check relatively to 'allSongs'.
		and forall s2 in set allSongs & s2.link <> l
	post exists1 s1 in set songs & s1.name = n and s1.link = l
		and exists1 s2 in set allSongs & s2.name = n and s2.link = l;
	
	public RemoveSong : Song ==> ()
	RemoveSong(s) == (
		atomic(
			songs := songs \ {s};
			allSongs := allSongs \ {s};
		);
	)
	pre s in set songs and s in set allSongs
	post s not in set songs and songs~ = songs union {s}
		and s not in set allSongs and allSongs~ = allSongs union {s};
	
	public SetAddress : Common`Address ==> ()
	SetAddress(addr) == address := addr
	post address = addr;

	public AddGenre : Genre ==> ()
	AddGenre(g) == genres := genres union {g}
	pre g not in set genres
	post g in set genres and genres~ = genres \ {g};
	
	public RemoveGenre : Genre ==> ()
	RemoveGenre(g) == genres := genres \ {g}
	pre g in set genres
	post g not in set genres and genres~ = genres union {g};

	public AddInstrument : Instrument ==> ()
	AddInstrument(i) == instruments := instruments union {i}
	pre i not in set instruments
	post i in set instruments and instruments~ = instruments \ {i};
	
	public RemoveInstrument : Instrument ==> ()
	RemoveInstrument(i) == instruments := instruments \ {i}
	pre i in set instruments
	post i not in set instruments and instruments~ = instruments union {i};

	public SetDescription : Common`String ==> ()
	SetDescription(d) == description := d
	post description = d;

	public static GetPublicUsers : Common`String1 * PublicUsers ==> PublicUsers
	GetPublicUsers(searchStr,array) == (
		dcl results : PublicUsers := {};
		for all u in set array do
			if(Common`ContainsStr2(u.name,searchStr)) then
					results := results union {u};
		return results;
	)
	post RESULT subset array;
functions
traces
end PublicUser