class PublicUser is subclass of User
types
	public static Genre = Common`String1;
	public static Genres = set of Genre;
	public static Instrument = Common`String1;
	public static Instruments = set of Instrument;
	public static Music ::
		name : Common`String1
		link : Common`String1;
	public static Musics = set of Music;
	public static PublicUsers = set of PublicUser;
values
instance variables
	public musics : Musics;
	public location : Common`Address;
	public genres : Genres;
	public instruments : Instruments;
	public description : Common`String;
	private static allMusics : Musics := {};
operations
	public PublicUser : Common`String1 * Common`Address ==> PublicUser
	PublicUser(stgName, loc) == (
		musics := {};
		location := loc;
		genres := {};
		instruments := {};
		description := "";
		User(stgName);
	)
	post musics = {} and location = loc and genres = {} and instruments = {} and description = "";

	public AddMusic : Common`String1 * Common`String1 ==> ()
	AddMusic(n,l) == (
		dcl m : Music := mk_Music(n,l);
		musics := musics union {m};
		allMusics := allMusics union {m};
	)
	pre forall m1 in set musics & m1.link <> l	-- double check
		and forall m2 in set allMusics & m2.link <> l
	post exists1 m1 in set musics & m1.name = n and m1.link = l	-- double check
		and exists1 m2 in set allMusics & m2.name = n and m2.link = l;
	
	public RemoveMusic : Music ==> ()
	RemoveMusic(m) == (
		musics := musics \ {m};
		allMusics := allMusics \ {m};
	)
	pre m in set musics and m in set allMusics
	post m not in set musics and musics~ = musics union {m}
		and m not in set allMusics and allMusics~ = allMusics union {m};
	
	public SetLocation : Common`Address ==> ()
	SetLocation(l) == location := l
	post location = l;

	public AddGenre : Genre ==> ()
	AddGenre(g) == genres := genres union {g}
	pre g not in set genres
	post g in set genres and genres~ = genres \ {g};
	
	public RemoveGenre : Genre ==> ()
	RemoveGenre(g) == genres := genres \ {g}
	pre g in set genres
	post g not in set genres and genres~ = genres union {g};

	public AddInstrument : Instrument ==> ()
	AddInstrument(i) == instruments := instruments union {i}
	pre i not in set instruments
	post i in set instruments and instruments~ = instruments \ {i};
	
	public RemoveInstrument : Instrument ==> ()
	RemoveInstrument(i) == instruments := instruments \ {i}
	pre i in set instruments
	post i not in set instruments and instruments~ = instruments union {i};

	public SetDescription : Common`String ==> ()
	SetDescription(d) == description := d
	post description = d;

	public static GetPublicUsers : Common`String1 * PublicUsers ==> PublicUsers
	GetPublicUsers(searchStr,array) == (
		dcl results : PublicUsers := {};
		for all u in set array do
			if(Common`ContainsStr2(u.name,searchStr)) then
					results := results union {u};
		return results;
	)
	post RESULT subset array;
functions
traces
end PublicUser