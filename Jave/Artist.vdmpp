class Artist is subclass of PublicUser
types
	public static Bands = set of Band;
	public static Artists = set of Artist;
values
-- TODO Define values here
instance variables
	private memberOf : Bands;
	private static artists : Artists := {};
operations
	public Artist : Common`String1 * Common`String1 * Common`Address ==> Artist
	Artist(firstName,lastName,loc) == (
		memberOf := {};
		artists := artists union {self};
		PublicUser(firstName,lastName,loc);
	);
	-- post
	
	public AddBand(b : Band) == (
		memberOf := memberOf union {b};
	)
	pre memberOf inter {b} = {}
	post memberOf inter {b} = {b};
	
	public RemoveBand(b : Band) == (
		memberOf := memberOf \ {b};
	)
	pre memberOf inter {b} = {b}
	post memberOf inter {b} = {};
	
	public GetBands : () ==> Bands
	GetBands() == (
		return memberOf;
	);
	--pre
	--post;

	public GetBands : Common`String ==> Bands
	GetBands(name) == (
		dcl results : Bands := {};
		for all band in set memberOf do
			if(ContainsStr2(band.GetStageName(),name)) then
					results := results union {band};
		return results;
	);
	--pre
	--post;

	public GetArtists : () ==> Artists
	GetArtists() == (
		return artists;
	);
	--pre
	--post;

	public GetArtists : Common`String ==> Artists
	GetArtists(name) == (
		dcl results : Artists := {};
		for all artist in set artists do
			if(ContainsStr2(artist.GetStageName(),name)) then
					results := results union {artist};
		return results;
	);
	--pre
	--post;

	private static ContainsStr2 : Common`String1 * Common`String1 ==> bool
	ContainsStr2(str1,str2) == (
		for i = 0 to len str1 - len str2 do (
			dcl res : bool := true;
			for j = 0 to len str2 - 1 do (
				if (str1(i+j) <> str2(j)) then
					res := false;
			);
			if(res) then
				return res;
		);
		return false;
	);
	--pre
	--post;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Artist