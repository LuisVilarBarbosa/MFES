class Conversation
types
	public static Users = set1 of User;
	public static Messages = set of Message;
values
-- TODO Define values here
instance variables
	private members : Users;
	private topic : Common`String1;
	private static messages : Messages := {};
operations
	public Conversation : Common`String1 * Users ==> Conversation
	Conversation(t, users) == (
		topic := t;
		members := users;
		for all user in set members do
			user.AddConversation(self);
	)
	pre card users > 1
	post members = users and topic = t; -- and forall user in set members & user.GetConversations() inter {self} = {self};

	public AddMember : User ==> ()
	AddMember(u) == (
		members := members union {u};
	)
	pre members inter {u} = {}
	post members inter {u} = {u};
	
	public RemoveMember : User ==> ()
	RemoveMember(u) == (
		members := members \ {u};
	)
	pre members inter {u} = {u}
	post members inter {u} = {};
	
	public GetMembers : () ==> Users
	GetMembers() == (
		return members;
	);
	--pre
	--post;

	public SetTopic : Common`String1 ==> ()
	SetTopic(t) == (
		topic := t;
	);
	--pre
	--post;

	public GetTopic : () ==> Common`String1
	GetTopic() == (
		return topic;
	);
	--pre
	--post;

	public AddMessage : Message ==> ()
	AddMessage(m) == (
		messages := messages union {m};
	)
	pre messages inter {m} = {}
	post messages inter {m} = {m};

	public GetMessages : () ==> Messages
	GetMessages() == (
		return messages;
	);
	--pre
	--post;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Conversation