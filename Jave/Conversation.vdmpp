class Conversation
types
	public static Users = set1 of User;
	public static Message ::
		date : Common`Date
		text : Common`String1
		sender : User;
	public static Messages = inmap nat1 to Message;
values
	private static minMembers = 2;
instance variables
	-- Variables declared public to facilitate queries
	public members : Users;
	public topic : Common`String1;
	public messages : Messages := { |-> };
operations
	public Conversation : Common`String1 * Users ==> Conversation
	Conversation(t, users) == (
		topic := t;
		members := users;
		for all user in set members do
			user.AddConversation(self);
	)
	pre card users >= minMembers
	post members = users and topic = t and forall user in set members & user.conversations inter {self} = {self};

	public AddMember : User ==> ()
	AddMember(u) == (
		if (members inter {u} = {}) then (
			members := members union {u};
			u.AddConversation(self);
		);
	)
	--pre members inter {u} = {}
	post members inter {u} = {u};
	
	public RemoveMember : User ==> ()
	RemoveMember(u) == (
		if (members inter {u} = {u} and card members > minMembers) then (
			members := members \ {u};
			u.RemoveConversation(self);
		);
	)
	pre card members >= minMembers
	post members inter {u} = {} and card members >= minMembers and u.conversations inter {self} = {};

	public SetTopic : Common`String1 ==> ()
	SetTopic(t) == topic := t
	--pre
	post topic = t;

	public AddMessage : Common`Date * Common`String1 * User ==> ()
	AddMessage(d,t,s) == (
		dcl msg : Message := mk_Message(d,t,s);
		dcl myMap : Messages := { card dom messages + 1 |-> msg };
		messages := messages munion myMap;
	)
	pre s in set members
	--post
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Conversation