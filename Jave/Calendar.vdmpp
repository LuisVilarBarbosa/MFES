class Calendar
types
	public static Performers = set1 of PublicUser;
	public static Show ::
		name : Common`String1
		performers : Performers
		startDate : Common`Date
		endDate : Common`Date
		place : Place
		description : Common`String;
	public static Shows = seq of Show;
	private static MyShows = set of Show;
values
	private minPerformers = 1;
instance variables
	private static shows : MyShows := {};
operations
	public static AddShow : Show ==> ()
	AddShow(s) == shows := shows union {s}
	pre s not in set shows
	post s in set shows and shows~ = shows \ {s};

	public static RemoveShow : Show ==> ()
	RemoveShow(s) == shows := shows \ {s}
	pre s in set shows
	post s not in set shows and shows~ = shows union {s};
	
	-- Get shows ordered by start date
	public static GetShowsSortedByStartDate : () ==> Shows
	GetShowsSortedByStartDate() == (
		dcl newShows : Shows := [];
		for all s in set shows do
			newShows := newShows ^ [s];
		
		for all i in set inds newShows do
			for all j in set inds newShows do
				if(Common`isBeforeOrEqual(newShows(j).startDate,newShows(i).startDate)) then (
					dcl t : Show := newShows(i);
					newShows(i) := newShows(j);
					newShows(j) := t;
				);
		return newShows;
	)
	post forall i, j in set inds RESULT & i < j => Common`isBeforeOrEqual(RESULT(i).startDate, RESULT(j).startDate);

functions
	public static CreateShow : Common`String1 * Performers * Common`Date * Common`Date * Place * Common`String +> Show
	CreateShow(n,ps,sd,ed,pl,desc) == mk_Show(n,ps,sd,ed,pl,desc)
	pre card ps >= minPerformers and Common`isBeforeOrEqual(sd,ed)
	post RESULT.name = n and RESULT.performers = ps and RESULT.startDate = sd
		and RESULT.endDate = ed and RESULT.place = pl and RESULT.description = desc;
traces
end Calendar