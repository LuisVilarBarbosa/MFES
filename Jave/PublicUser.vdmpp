class PublicUser is subclass of User
types
	public static Genre = Common`String1;
	public static Genres = set of Genre;
	public static Instrument = Common`String1;
	public static Instruments = set of Instrument;
	public static Music ::
		name : Common`String1
		link : Common`String1;
	public static Musics = set of Music;
values
-- TODO Define values here
instance variables
	-- Variables declared public to facilitate queries
	public musics : Musics;
	public location : Common`Address;
	public genres : Genres;
	public instruments : Instruments;
	public description : Common`String;
operations
	public PublicUser : Common`String1 * Common`Address ==> PublicUser
	PublicUser(stgName, loc) == (
		musics := {};
		location := loc;
		genres := {};
		instruments := {};
		description := "";
		User(stgName);
	);
	--pre
	--post

	public AddMusic : Music ==> ()
	AddMusic(m) == musics := musics union {m}
	pre musics inter {m} = {}
	post musics inter {m} = {m};
	
	public RemoveMusic : Music ==> ()
	RemoveMusic(m) == musics := musics \ {m}
	pre musics inter {m} = {m}
	post musics inter {m} = {};
	
	public SetLocation : Common`Address ==> ()
	SetLocation(l) == location := l
	--pre 
	post location = l;

	public AddGenre : Genre ==> ()
	AddGenre(g) == genres := genres union {g}
	pre genres inter {g} = {}
	post genres inter {g} = {g};
	
	public RemoveGenre : Genre ==> ()
	RemoveGenre(g) == genres := genres \ {g}
	pre genres inter {g} = {g}
	post genres inter {g} = {};

	public AddInstrument : Instrument ==> ()
	AddInstrument(i) == instruments := instruments union {i}
	pre instruments inter {i} = {}
	post instruments inter {i} = {i};
	
	public RemoveInstrument : Instrument ==> ()
	RemoveInstrument(i) == instruments := instruments \ {i}
	pre instruments inter {i} = {i}
	post instruments inter {i} = {};

	public SetDescription : Common`String ==> ()
	SetDescription(d) == description := d
	--pre 
	post description = d;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end PublicUser